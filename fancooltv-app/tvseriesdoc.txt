# TV SERIES API - DOCUMENTAZIONE COMPLETA

## ENDPOINT UPDATE TV SERIES

### URL
```
PUT /api/v1/tvseries/{id}/complete
```

### HEADERS
```
Authorization: Bearer {token}
Content-Type: multipart/form-data
```

## STRUTTURA RESPONSE API GET TV SERIES DETAILS

### GET /api/v1/tvseries/{id}

```json
{
  "data": {
    "tv_series_id": 38,
    "title": "Nome Serie TV",
    "year": 2024,
    "imdb_rating": 8.5,
    "total_seasons": 1,
    "total_episodes": 10,
    "status": "ongoing",
    "category": {
      "id": 4,
      "name": "thriller"
    },
    "poster": {
      "url": "https://api.dobridobrev.com/storage/images/poster/filename.jpg",
      "sizes": {
        "w92": "...",
        "w154": "...",
        "w185": "...",
        "w342": "...",
        "w500": "...",
        "w780": "...",
        "original": "..."
      },
      "width": 960,
      "height": 960,
      "format": "jpg"
    },
    "description": "Descrizione della serie TV",
    "backdrop": {
      "url": "https://api.dobridobrev.com/storage/images/backdrop/filename.png",
      "sizes": {
        "w300": "...",
        "w780": "...",
        "w1280": "...",
        "original": "..."
      },
      "width": 896,
      "height": 326,
      "format": "png"
    },
    "persons": [
      {
        "person_id": 17,
        "name": "Nome Attore",
        "profile_image": "images/persons/filename.jpg",
        "profile_image_full": "https://api.dobridobrev.com/storage/images/persons/filename.jpg",
        "image_id": 25
      }
    ],
    "trailers": [],
    "video_files": [
      {
        "video_file_id": 123,
        "title": "Nome Serie - Trailer",
        "format": "mp4",
        "resolution": "1920x1080",
        "stream_url": "https://api.dobridobrev.com/api/v1/stream-video/filename.mp4",
        "public_stream_url": "https://api.dobridobrev.com/api/v1/public-video/filename.mp4",
        "type": "local"
      }
    ],
    "seasons": [
      {
        "season_id": 370,
        "season_number": 1,
        "name": "Stagione 1",
        "overview": "Descrizione stagione",
        "total_episodes": 1,
        "year": "2024",
        "premiere_date": "2024-01-01",
        "episodes": [
          {
            "episode_id": 17361,
            "title": "Episodio 1",
            "description": "Descrizione episodio",
            "episode_number": 1,
            "duration": 45,
            "air_date": "2024-01-01",
            "status": "published",
            "still": {
              "url": "https://api.dobridobrev.com/storage/images/still/filename.jpg",
              "sizes": {
                "w92": "...",
                "w185": "...",
                "w300": "...",
                "original": "..."
              },
              "width": 960,
              "height": 960,
              "format": "jpg"
            },
            "video_files": [
              {
                "video_file_id": 447,
                "title": "Episodio 1 - Episode 1",
                "format": "mp4",
                "resolution": "1920x1080",
                "stream_url": "https://api.dobridobrev.com/api/v1/stream-video/filename.mp4",
                "public_stream_url": "https://api.dobridobrev.com/api/v1/public-video/filename.mp4",
                "type": "local"
              }
            ]
          }
        ]
      }
    ]
  }
}
```

## FORMATO RICHIESTA UPDATE

### FormData per UPDATE TV Series

```javascript
const formData = new FormData();

// CAMPI BASE (TUTTI REQUIRED PER PRECOMPILAZIONE)
formData.append('title', 'Nuovo Titolo');
formData.append('year', '2024');
formData.append('imdb_rating', '8.5');  // IMPORTANTE: inviare sempre
formData.append('total_seasons', '1');
formData.append('total_episodes', '10'); // IMPORTANTE: inviare sempre
formData.append('status', 'ongoing');    // ongoing|ended|canceled|unknown|published|draft|upcoming
formData.append('category_id', '4');
formData.append('description', 'Nuova descrizione');

// PERSONS (CAST) - Array di person_id
formData.append('persons[]', '17');
formData.append('persons[]', '25');

// FILE UPLOADS (OPZIONALI PER UPDATE)
if (posterFile) {
  formData.append('poster_image', posterFile);
}
if (backdropFile) {
  formData.append('backdrop_image', backdropFile);
}
if (trailerFile) {
  formData.append('trailer_video', trailerFile);
}

// SEASONS E EPISODES
formData.append('seasons[0][season_number]', '1');
formData.append('seasons[0][name]', 'Stagione 1');
formData.append('seasons[0][total_episodes]', '1');
formData.append('seasons[0][year]', '2024');

// EPISODES
formData.append('seasons[0][episodes][0][episode_id]', '17361'); // Per update esistente
formData.append('seasons[0][episodes][0][title]', 'Nuovo Titolo Episodio');
formData.append('seasons[0][episodes][0][description]', 'Nuova descrizione');
formData.append('seasons[0][episodes][0][episode_number]', '1');
formData.append('seasons[0][episodes][0][duration]', '45');
formData.append('seasons[0][episodes][0][status]', 'published');

// FILE UPLOADS EPISODI (OPZIONALI)
if (episodeVideoFile) {
  formData.append('seasons[0][episodes][0][episode_video]', episodeVideoFile);
}
if (stillImageFile) {
  formData.append('seasons[0][episodes][0][still_image]', stillImageFile);
}
```

## PRECOMPILAZIONE FORM ANGULAR

### 1. Caricare Dati TV Series

```typescript
// Nel componente edit
ngOnInit() {
  const tvSeriesId = this.route.snapshot.params['id'];
  this.loadTvSeriesData(tvSeriesId);
}

loadTvSeriesData(id: number) {
  this.tvSeriesService.getTvSeriesDetails(id).subscribe(response => {
    this.precompileForm(response.data);
  });
}
```

### 2. Precompilare Form con Tutti i Campi

```typescript
precompileForm(tvSeries: any) {
  // CAMPI BASE
  this.tvSeriesForm.patchValue({
    title: tvSeries.title,
    year: tvSeries.year,
    imdb_rating: tvSeries.imdb_rating,        // IMPORTANTE
    total_seasons: tvSeries.total_seasons,
    total_episodes: tvSeries.total_episodes,  // IMPORTANTE
    status: tvSeries.status,                  // IMPORTANTE per dropdown
    category_id: tvSeries.category?.id,
    description: tvSeries.description
  });

  // PRECOMPILARE CAST (PERSONS)
  if (tvSeries.persons && tvSeries.persons.length > 0) {
    const selectedPersons = tvSeries.persons.map(p => p.person_id);
    this.tvSeriesForm.patchValue({
      persons: selectedPersons
    });
  }

  // PRECOMPILARE POSTER
  if (tvSeries.poster) {
    this.posterPreviewUrl = tvSeries.poster.url;
    this.tvSeriesForm.patchValue({
      poster: {
        url: tvSeries.poster.url,
        width: tvSeries.poster.width,
        height: tvSeries.poster.height
      }
    });
  }

  // PRECOMPILARE BACKDROP
  if (tvSeries.backdrop) {
    this.backdropPreviewUrl = tvSeries.backdrop.url;
    this.tvSeriesForm.patchValue({
      backdrop: {
        url: tvSeries.backdrop.url,
        width: tvSeries.backdrop.width,
        height: tvSeries.backdrop.height
      }
    });
  }

  // PRECOMPILARE TRAILER VIDEO
  if (tvSeries.video_files && tvSeries.video_files.length > 0) {
    const trailer = tvSeries.video_files.find(v => v.title.includes('Trailer'));
    if (trailer) {
      this.trailerVideoUrl = trailer.stream_url;
      this.showWatchTrailerButton = true;
    }
  }

  // PRECOMPILARE SEASONS
  if (tvSeries.seasons && tvSeries.seasons.length > 0) {
    this.precompileSeasons(tvSeries.seasons);
  }
}
```

### 3. Precompilare Seasons e Episodes

```typescript
precompileSeasons(seasons: any[]) {
  const seasonsFormArray = this.tvSeriesForm.get('seasons') as FormArray;
  seasonsFormArray.clear();

  seasons.forEach(season => {
    const seasonGroup = this.fb.group({
      season_id: [season.season_id],
      season_number: [season.season_number],
      name: [season.name],
      total_episodes: [season.total_episodes],
      year: [season.year],
      episodes: this.fb.array([])
    });

    // Precompilare episodes
    if (season.episodes && season.episodes.length > 0) {
      const episodesArray = seasonGroup.get('episodes') as FormArray;
      
      season.episodes.forEach(episode => {
        const episodeGroup = this.fb.group({
          episode_id: [episode.episode_id],      // IMPORTANTE per update
          title: [episode.title],
          description: [episode.description],
          episode_number: [episode.episode_number],
          duration: [episode.duration],
          status: [episode.status]
        });

        // Precompilare episode video
        if (episode.video_files && episode.video_files.length > 0) {
          this.episodeVideoUrls[episode.episode_id] = episode.video_files[0].stream_url;
        }

        // Precompilare still image
        if (episode.still) {
          this.episodeStillUrls[episode.episode_id] = episode.still.url;
        }

        episodesArray.push(episodeGroup);
      });
    }

    seasonsFormArray.push(seasonGroup);
  });
}
```

### 4. Gestire Update Response

```typescript
updateTvSeries() {
  const formData = this.buildFormData();
  
  this.tvSeriesService.updateTvSeries(this.tvSeriesId, formData).subscribe({
    next: (response) => {
      // AGGIORNARE UI CON NUOVI DATI
      this.precompileForm(response.tv_series);
      
      // MOSTRARE MESSAGGIO SUCCESSO
      this.showSuccessMessage('TV Series aggiornata con successo');
      
      // AGGIORNARE PREVIEW URLS
      this.updatePreviewUrls(response.tv_series);
    },
    error: (error) => {
      console.error('Errore update:', error);
    }
  });
}

updatePreviewUrls(tvSeries: any) {
  // Aggiornare poster preview
  if (tvSeries.poster) {
    this.posterPreviewUrl = tvSeries.poster.url;
  }
  
  // Aggiornare backdrop preview
  if (tvSeries.backdrop) {
    this.backdropPreviewUrl = tvSeries.backdrop.url;
  }
  
  // Aggiornare trailer video
  if (tvSeries.video_files && tvSeries.video_files.length > 0) {
    const trailer = tvSeries.video_files.find(v => v.title.includes('Trailer'));
    if (trailer) {
      this.trailerVideoUrl = trailer.stream_url;
      this.showWatchTrailerButton = true;
    }
  }
}
```

## CAMPI OBBLIGATORI PER EVITARE NULL

### Nel FormData di Update, SEMPRE includere:

1. **`imdb_rating`** - Anche se vuoto, inviare `''` o valore esistente
2. **`total_episodes`** - Sempre inviare valore numerico o esistente
3. **`status`** - Sempre inviare uno dei valori validi
4. **`persons`** - Sempre inviare array (anche vuoto `[]`)

### Esempio Controllo Pre-Invio:

```typescript
buildFormData(): FormData {
  const formData = new FormData();
  const formValue = this.tvSeriesForm.value;
  
  // SEMPRE includere questi campi
  formData.append('imdb_rating', formValue.imdb_rating || '');
  formData.append('total_episodes', formValue.total_episodes || '0');
  formData.append('status', formValue.status || 'ongoing');
  
  // Persons array
  if (formValue.persons && formValue.persons.length > 0) {
    formValue.persons.forEach(personId => {
      formData.append('persons[]', personId.toString());
    });
  }
  
  return formData;
}
```

## GESTIONE PROGRESS BAR UPLOAD

### Per Upload con Percentuali:

```typescript
updateTvSeries() {
  const formData = this.buildFormData();
  
  this.http.put(`/api/v1/tvseries/${this.tvSeriesId}/complete`, formData, {
    reportProgress: true,
    observe: 'events'
  }).subscribe({
    next: (event) => {
      if (event.type === HttpEventType.UploadProgress) {
        const progress = Math.round(100 * event.loaded / event.total!);
        this.uploadProgress = progress;
      } else if (event.type === HttpEventType.Response) {
        // Upload completato
        this.handleUpdateSuccess(event.body);
      }
    }
  });
}
```

## WATCH TRAILER BUTTON

### Nel Template TV Series Details:

```html
<button 
  *ngIf="tvSeries.video_files && tvSeries.video_files.length > 0"
  (click)="watchTrailer()"
  class="btn btn-primary">
  <i class="fas fa-play"></i> Watch Trailer
</button>
```

### Nel Component:

```typescript
watchTrailer() {
  const trailer = this.tvSeries.video_files.find(v => v.title.includes('Trailer'));
  if (trailer) {
    if (trailer.type === 'youtube') {
      // Apri YouTube iframe
      this.openYouTubePlayer(trailer.url);
    } else {
      // Apri video player locale
      this.openVideoPlayer(trailer.stream_url);
    }
  }
}
```

Questa documentazione copre tutto quello che serve per precompilare correttamente il form e gestire gli update senza perdere dati.
